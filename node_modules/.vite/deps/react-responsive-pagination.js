import {
  require_react_is
} from "./chunk-AN4UEH7R.js";
import {
  require_object_assign
} from "./chunk-VTNAQ2SD.js";
import {
  require_react
} from "./chunk-JLBVE3FS.js";
import {
  __commonJS,
  __toESM
} from "./chunk-HUBM7RA2.js";

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-responsive-pagination/dist/index.js
var import_react9 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/react-responsive-pagination/dist/hooks/usePaginationItems.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/helpers/util.js
function sum(items) {
  return items.reduce((acc, width) => acc + width, 0);
}
function sanatizeInteger(maybeInteger) {
  return typeof maybeInteger === "number" && Number.isInteger(maybeInteger) ? maybeInteger : void 0;
}
function sanatizeBoolean(maybeBoolean) {
  return typeof maybeBoolean === "boolean" ? maybeBoolean : void 0;
}

// node_modules/react-responsive-pagination/dist/compositionItem.js
function createActivePage(page) {
  return { type: "active", page };
}
function createPage(page) {
  return { type: "page", page };
}
function createNavPrevious(page) {
  return { type: "<", page };
}
function createNavNext(page) {
  return { type: ">", page };
}
function createEllipsis(ellipsisPos) {
  return { type: `\u2026${ellipsisPos}`, page: void 0 };
}

// node_modules/react-responsive-pagination/dist/helpers/iterator.js
function* zipIterators(xs, ys) {
  while (true) {
    const xResult = xs.next();
    const yResult = ys.next();
    if (xResult.done && yResult.done)
      break;
    yield [xResult.value, yResult.value];
  }
}
function lastWhere(xs, predicate) {
  let lastSoFar;
  for (const x of xs) {
    if (!predicate(x))
      break;
    lastSoFar = x;
  }
  return lastSoFar;
}
function iteratorNext(xs) {
  const xResult = xs.next();
  return xResult.done ? void 0 : xResult.value;
}

// node_modules/react-responsive-pagination/dist/compositions/ranges.js
function* narrowToWidePaginationItemRanges(start, end, collapsePos) {
  for (const range of narrowToWideNumberRanges(start, end, collapsePos)) {
    yield range.map((item) => item === "\u2026" ? createEllipsis(collapsePos) : createPage(item));
  }
}
function* narrowToWideNumberRanges(first, last, collapsePos) {
  const fullWidth = last - first + 1;
  for (let iterationWidth = 1; iterationWidth < fullWidth; iterationWidth++) {
    const range = getCollapsedRange(first, last, iterationWidth, collapsePos);
    if (range)
      yield range;
  }
  yield getFullRange(first, last);
}
function getCollapsedRange(first, last, requiredWidth, collapsePos) {
  if (requiredWidth < 3)
    return;
  const widthOfRange = requiredWidth - 2;
  return collapsePos === "L" ? [first, "\u2026", ...getFullRange(last - (widthOfRange - 1), last)] : [...getFullRange(first, first + (widthOfRange - 1)), "\u2026", last];
}
function getFullRange(start, end) {
  if (end < start)
    return [];
  return Array.from(Array(end - start + 1).keys(), (i) => i + start);
}

// node_modules/react-responsive-pagination/dist/compositions/index.js
function* narrowToWideCompositions({ current, total, narrowBehaviour, renderNav }) {
  if (total < 1)
    return;
  const clampedCurrent = Math.max(1, Math.min(current, total));
  const compositions = narrowToWideCompositionsUnfiltered(clampedCurrent, total, renderNav);
  for (const initialComposition of compositions) {
    if (narrowBehaviour)
      yield* narrowBehaviour(initialComposition);
    yield initialComposition;
    yield* compositions;
  }
}
function* narrowToWideCompositionsUnfiltered(current, total, renderNav) {
  const navPrevious = createNavPrevious(current > 1 ? current - 1 : void 0);
  const navNext = createNavNext(current < total ? current + 1 : void 0);
  const activePage = createActivePage(current);
  const leftRanges = narrowToWidePaginationItemRanges(1, current - 1, "L");
  const rightRanges = narrowToWidePaginationItemRanges(current + 1, total, "R");
  const staggeredPairs = staggeredIterationRightRangeFirst(leftRanges, rightRanges);
  for (const { leftRange, rightRange } of staggeredPairs) {
    if (renderNav) {
      yield [navPrevious, ...leftRange, activePage, ...rightRange, navNext];
    } else {
      yield [...leftRange, activePage, ...rightRange];
    }
  }
}
function* staggeredIterationRightRangeFirst(leftRanges, rightRanges) {
  const zippedRanges = zipIterators(leftRanges, rightRanges);
  const initial = zippedRanges.next();
  if (initial.done)
    return;
  let [leftRange = [], rightRange = []] = initial.value;
  yield { leftRange, rightRange };
  for (const [nextLeftRange, nextRightRange] of zippedRanges) {
    if (nextRightRange) {
      rightRange = nextRightRange;
      yield { leftRange, rightRange };
    }
    if (nextLeftRange) {
      leftRange = nextLeftRange;
      yield { leftRange, rightRange };
    }
  }
}

// node_modules/react-responsive-pagination/dist/paginationItem.js
function compositionToPaginationItems(compositionItems, options) {
  const previousLabel = (options == null ? void 0 : options.previousLabel) || "\xAB";
  const a11yPreviousLabel = (options == null ? void 0 : options.ariaPreviousLabel) || "Previous";
  const nextLabel = (options == null ? void 0 : options.nextLabel) || "\xBB";
  const a11yNextLabel = (options == null ? void 0 : options.ariaNextLabel) || "Next";
  return compositionItems.map(({ type, page }) => {
    switch (type) {
      case "<":
        return {
          type: "previous",
          key: `previous${page === void 0 ? "_disabled" : ""}`,
          label: previousLabel,
          a11yLabel: previousLabel === a11yPreviousLabel ? void 0 : a11yPreviousLabel,
          gotoPage: page
        };
      case ">":
        return {
          type: "next",
          key: `next${page === void 0 ? "_disabled" : ""}`,
          label: nextLabel,
          a11yLabel: nextLabel === a11yNextLabel ? void 0 : a11yNextLabel,
          gotoPage: page
        };
      case "\u2026L":
      case "\u2026R":
        return {
          type: "ellipsis",
          key: `ellipsis_${type === "\u2026L" ? "l" : "r"}`,
          label: "\u2026",
          a11yHidden: true,
          gotoPage: void 0
        };
      default:
        return {
          type: "page",
          key: `${type}_${page}`,
          label: page.toString(),
          gotoPage: page,
          active: type === "active"
        };
    }
  });
}

// node_modules/react-responsive-pagination/dist/hooks/useWidestComposition.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/helpers/ref.js
function setRefValue(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

// node_modules/react-responsive-pagination/dist/hooks/useContentWidth.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/helpers/style.js
function getElementWidth(element) {
  const style = getComputedStyle(element);
  return styleMetricToInt(style.marginLeft) + getWidth(element) + styleMetricToInt(style.marginRight);
}
function getContentWidth(element) {
  const style = getComputedStyle(element);
  return element.getBoundingClientRect().width - styleMetricToInt(style.borderLeftWidth) - styleMetricToInt(style.paddingLeft) - styleMetricToInt(style.paddingRight) - styleMetricToInt(style.borderRightWidth);
}
function getNonContentWidth(element) {
  const style = getComputedStyle(element);
  return styleMetricToInt(style.marginLeft) + styleMetricToInt(style.borderLeftWidth) + styleMetricToInt(style.paddingLeft) + styleMetricToInt(style.paddingRight) + styleMetricToInt(style.borderRightWidth) + styleMetricToInt(style.marginRight);
}
function getWidth(element) {
  return element.getBoundingClientRect().width;
}
function styleMetricToInt(styleAttribute) {
  return styleAttribute ? parseInt(styleAttribute) : 0;
}

// node_modules/react-responsive-pagination/dist/hooks/useResizeNotifier.js
var import_react = __toESM(require_react(), 1);
function useResizeNotifier(element, callback) {
  const callBackRef = (0, import_react.useRef)(callback);
  (0, import_react.useLayoutEffect)(() => {
    callBackRef.current = callback;
  }, [callback]);
  (0, import_react.useLayoutEffect)(() => {
    if (!element)
      return;
    const resizeObserver = new ResizeObserver(withResizeLoopDetection(() => {
      callBackRef.current();
    }));
    resizeObserver.observe(element);
    return () => {
      resizeObserver.disconnect();
    };
  }, [element]);
}
function withResizeLoopDetection(callback) {
  return (entries, resizeObserver) => {
    const elements = entries.map((entry) => entry.target);
    const rectsBefore = elements.map((element) => element.getBoundingClientRect());
    callback();
    const rectsAfter = elements.map((element) => element.getBoundingClientRect());
    const changedElements = elements.filter((_, i) => !areRectSizesEqual(rectsBefore[i], rectsAfter[i]));
    changedElements.forEach((element) => unobserveUntilNextFrame(element, resizeObserver));
  };
}
function unobserveUntilNextFrame(element, resizeObserver) {
  resizeObserver.unobserve(element);
  requestAnimationFrame(() => {
    resizeObserver.observe(element);
  });
}
function areRectSizesEqual(rect1, rect2) {
  return rect1.width === rect2.width && rect1.height === rect2.height;
}

// node_modules/react-responsive-pagination/dist/hooks/useContentWidth.js
function useContentWidth(element) {
  const [width, setWidth] = (0, import_react2.useState)();
  function syncWidth() {
    const newWidth = element ? getContentWidth(element) : void 0;
    if (width !== newWidth) {
      setWidth(newWidth);
    }
  }
  useResizeNotifier(element, syncWidth);
  (0, import_react2.useLayoutEffect)(syncWidth);
  return width;
}

// node_modules/react-responsive-pagination/dist/hooks/useAvailableWidth.js
function useAvailableWidth(element) {
  var _a;
  return useContentWidth((_a = element == null ? void 0 : element.parentElement) != null ? _a : void 0);
}

// node_modules/react-responsive-pagination/dist/hooks/useWidestCompositionForWidth.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/hooks/useWidthCalculator/index.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/react-responsive-pagination/dist/widthCalculator/totalWidthCalculator.js
function createTotalWidthCalculator({ getItemWidth, outerFrameWidth }) {
  return function widthCalculator(items) {
    const itemWidths = items.map(getItemWidth);
    const contentWidth = sum(itemWidths);
    return outerFrameWidth + contentWidth;
  };
}

// node_modules/react-responsive-pagination/dist/widthCalculator/itemWidthCalculator.js
function createItemWidthCalculator({ getPageWidth, getNavWidth, ellipsisWidth }) {
  return function itemWidthCalculator({ type, page }) {
    if (type === "page" || type === "active") {
      return getPageWidth(page.toString(), type === "active");
    }
    if (type === "<" || type === ">") {
      return getNavWidth(type, page !== void 0);
    }
    if (type === "\u2026L" || type === "\u2026R") {
      return ellipsisWidth;
    }
    const _exCheck = type;
    return _exCheck;
  };
}

// node_modules/react-responsive-pagination/dist/widthCalculator/navWidthCalculator.js
function createNavWidthCalculator(widths) {
  return function navWidthCalculator(type, enabled) {
    const widthsForType = widths[type];
    return enabled ? widthsForType.enabled : widthsForType.disabled;
  };
}

// node_modules/react-responsive-pagination/dist/widthCalculator/pageWidthCalculator.js
function createPageWidthCalculator({ getActivePageWidth, getNormalPageWidth }) {
  return function pageWidthCalculator(label, active) {
    return active ? getActivePageWidth(label) : getNormalPageWidth(label);
  };
}

// node_modules/react-responsive-pagination/dist/widthCalculator/numberWidthCalculator.js
function createNumberWidthCalculator(widths) {
  return function numberWidthCalculator(label) {
    const numDigits = label.length;
    return widths.singleDigit + (widths.doubleDigit - widths.singleDigit) * (numDigits - 1);
  };
}

// node_modules/react-responsive-pagination/dist/widthCalculator/index.js
function createWidthCalculator(baseMetrics) {
  if (!baseMetrics) {
    return { requiredBaseMetrics: baseMetricItemsToMeasure };
  }
  return createGraph(baseMetrics);
}
function createGraph(baseMetrics) {
  const { itemWidths, outerFrameWidth } = baseMetrics;
  return createTotalWidthCalculator({
    getItemWidth: createItemWidthCalculator({
      getPageWidth: createPageWidthCalculator({
        getNormalPageWidth: createNumberWidthCalculator({
          singleDigit: itemWidths.normalPageSingleDigit,
          doubleDigit: itemWidths.normalPageDoubleDigit
        }),
        getActivePageWidth: createNumberWidthCalculator({
          singleDigit: itemWidths.activePageSingleDigit,
          doubleDigit: itemWidths.activePageDoubleDigit
        })
      }),
      getNavWidth: createNavWidthCalculator({
        "<": {
          enabled: itemWidths.navPreviousEnabled,
          disabled: itemWidths.navPreviousDisabled
        },
        ">": {
          enabled: itemWidths.navNextEnabled,
          disabled: itemWidths.navNextDisabled
        }
      }),
      ellipsisWidth: itemWidths.ellipsis
    }),
    outerFrameWidth
  });
}
var baseMetricItemsToMeasure = {
  normalPageSingleDigit: createPage(8),
  normalPageDoubleDigit: createPage(88),
  activePageSingleDigit: createActivePage(8),
  activePageDoubleDigit: createActivePage(88),
  navPreviousEnabled: createNavPrevious(0),
  navPreviousDisabled: createNavPrevious(void 0),
  navNextEnabled: createNavNext(0),
  navNextDisabled: createNavNext(void 0),
  ellipsis: createEllipsis("L")
};

// node_modules/react-responsive-pagination/dist/helpers/object.js
function objectUnzip(object) {
  const entries = Object.entries(object);
  const keys = entries.map(([key, _]) => key);
  const values = entries.map(([_, value]) => value);
  return [keys, values];
}
function objectZip(keys, values) {
  const ret = {};
  keys.forEach((key, index) => {
    ret[key] = values[index];
  });
  return ret;
}

// node_modules/react-responsive-pagination/dist/hooks/useWidthCalculator/getViewMetrics.js
function getViewMetricsFromContainer(containerElement, itemKeys) {
  const itemElements = Array.from(containerElement.children);
  return {
    outerFrameWidth: getNonContentWidth(containerElement),
    itemWidths: getItemWidthsFromItemDomElements(itemKeys, itemElements)
  };
}
function getItemWidthsFromItemDomElements(itemKeys, itemElements) {
  const itemWidths = itemElements.map(getElementWidth);
  return objectZip(itemKeys, itemWidths);
}

// node_modules/react-responsive-pagination/dist/hooks/useWidthCalculator/index.js
function useWidthCalculator() {
  const [baseMetrics, setBaseMetrics] = (0, import_react3.useState)(null);
  const resetCalculator = (0, import_react3.useCallback)(() => setBaseMetrics(null), []);
  const calculatorResult = (0, import_react3.useMemo)(() => {
    return createWidthCalculator(baseMetrics);
  }, [baseMetrics]);
  if ("requiredBaseMetrics" in calculatorResult) {
    const [itemKeys, items] = objectUnzip(calculatorResult.requiredBaseMetrics);
    return {
      renderNeeded: {
        items,
        ref(containerElement) {
          if (containerElement) {
            setBaseMetrics(getViewMetricsFromContainer(containerElement, itemKeys));
          }
        }
      },
      clearCache: resetCalculator
    };
  }
  return {
    calculator: calculatorResult,
    clearCache: resetCalculator
  };
}

// node_modules/react-responsive-pagination/dist/hooks/useFoutDetector.js
var import_react4 = __toESM(require_react(), 1);
function useFoutDetector(getElements, handleFout) {
  (0, import_react4.useLayoutEffect)(() => {
    const elements = getElements();
    if (!elements)
      return;
    return setupWidthChangeAfterRenderListener(elements, handleFout);
  });
}
function setupWidthChangeAfterRenderListener(elements, handleWidthChangeAfterRender) {
  const getInitialWidth = createInitialWidthProvider(elements);
  const hasWidthChanged = (element) => {
    return isSignificantDifference(getInitialWidth(element), getWidth(element));
  };
  return setupResizeObserver(elements, (maybeResizedElements) => {
    if (maybeResizedElements.some(hasWidthChanged)) {
      handleWidthChangeAfterRender();
    }
  });
}
function createInitialWidthProvider(elements) {
  const initialWidths = elements.map(getWidth);
  return function getInitialWidth(element) {
    const index = elements.indexOf(element);
    return initialWidths[index];
  };
}
function setupResizeObserver(elements, handleElementsResized) {
  const resizeObserver = new ResizeObserver((entries) => {
    const elements2 = entries.map(getTargetElement);
    handleElementsResized(elements2);
  });
  elements.forEach((element) => resizeObserver.observe(element));
  return () => resizeObserver.disconnect();
}
function getTargetElement(entry) {
  return entry.target;
}
function isSignificantDifference(width1, width2) {
  return Math.abs(width1 - width2) > 0.5;
}

// node_modules/react-responsive-pagination/dist/hooks/useWidestCompositionForWidth.js
function useWidestCompositionForWidth(narrowToWideCompositionsProvider, maxWidth) {
  const widthCalculator = useWidthCalculator();
  const containerElementRef = (0, import_react5.useRef)(null);
  const clearCache = widthCalculator.clearCache;
  useFoutDetector(() => getItemsDomElements(containerElementRef.current), clearCache);
  if ("renderNeeded" in widthCalculator) {
    return {
      items: widthCalculator.renderNeeded.items,
      ref(containerElement) {
        widthCalculator.renderNeeded.ref(containerElement);
        containerElementRef.current = containerElement;
      },
      clearCache
    };
  } else {
    return {
      items: getLargestFittingCompositionWithFallback(narrowToWideCompositionsProvider, widthCalculator.calculator, maxWidth),
      ref: containerElementRef,
      clearCache
    };
  }
}
function getLargestFittingCompositionWithFallback(getNarrowToWideCompositions, getCompositionWidth, maxWidth) {
  var _a, _b;
  const narrowToWideCompositions2 = getNarrowToWideCompositions();
  const firstComposition = (_a = iteratorNext(narrowToWideCompositions2)) != null ? _a : [];
  const doesCompositionFit = (composition) => {
    return getCompositionWidth(composition) < maxWidth;
  };
  return (_b = lastWhere(narrowToWideCompositions2, doesCompositionFit)) != null ? _b : firstComposition;
}
function getItemsDomElements(viewDomElement) {
  return viewDomElement && Array.from(viewDomElement.children);
}

// node_modules/react-responsive-pagination/dist/hooks/useWidestComposition.js
function useWidestComposition(narrowToWideCompositionsProvider, maxWidth) {
  var _a;
  const [containerElement, setContainerElement] = (0, import_react6.useState)(null);
  const availableWidth = useAvailableWidth(maxWidth === void 0 ? containerElement : null);
  const width = (_a = maxWidth != null ? maxWidth : availableWidth) != null ? _a : 0;
  const { items, ref: widestCompositionRef, clearCache } = useWidestCompositionForWidth(narrowToWideCompositionsProvider, width);
  const ref = (0, import_react6.useCallback)((element) => {
    setRefValue(widestCompositionRef, element);
    setContainerElement(element);
  }, [widestCompositionRef]);
  return {
    items,
    ref,
    clearCache
  };
}

// node_modules/react-responsive-pagination/dist/hooks/usePaginationItems.js
function usePaginationItems(inputCurrent, inputTotal, maxWidth, options) {
  const narrowToWideCompositionsProvider = () => {
    var _a, _b, _c;
    return narrowToWideCompositions({
      current: (_a = sanatizeInteger(inputCurrent)) != null ? _a : 0,
      total: (_b = sanatizeInteger(inputTotal)) != null ? _b : 0,
      narrowBehaviour: options == null ? void 0 : options.narrowBehaviour,
      renderNav: (_c = sanatizeBoolean(options == null ? void 0 : options.renderNav)) != null ? _c : true
    });
  };
  const { items: compositionItems, ref, clearCache } = useWidestComposition(narrowToWideCompositionsProvider, maxWidth);
  const previousLabelCacheKey = labelCacheKey(options == null ? void 0 : options.previousLabel);
  const nextLabelCacheKey = labelCacheKey(options == null ? void 0 : options.nextLabel);
  (0, import_react7.useEffect)(() => {
    return () => clearCache();
  }, [clearCache, previousLabelCacheKey, nextLabelCacheKey]);
  const items = compositionToPaginationItems(compositionItems, options);
  return { items, ref, clearCache };
}
function labelCacheKey(item) {
  if ((0, import_react7.isValidElement)(item)) {
    showReactElementLabelWarning();
    switch (typeof item.type) {
      case "string":
        return `element-str-${item.type}`;
      case "function":
        return `element-fn-${item.type.name}`;
      default:
        return "element";
    }
  } else if (Array.isArray(item)) {
    showReactElementLabelWarning();
    return "element-array";
  } else {
    return item;
  }
}
var reactElementLabelWarningShown = false;
function showReactElementLabelWarning() {
  if (reactElementLabelWarningShown)
    return;
  console.log("react-responsive-pagination: using React elements for labels is experimental, please see: https://react-responsive-pagination.elantha.com/faq/#using-react-components-for-labels");
  reactElementLabelWarningShown = true;
}

// node_modules/react-responsive-pagination/dist/helpers/dom.js
function preventDefault(handler) {
  return (e) => {
    e.preventDefault();
    handler();
  };
}

// node_modules/react-responsive-pagination/dist/labelBehaviour.js
var import_react8 = __toESM(require_react(), 1);
function defaultLabelBehaviour({ a11yLabel, label }) {
  return !a11yLabel ? label : import_react8.default.createElement("span", { "aria-hidden": "true" }, label);
}

// node_modules/react-responsive-pagination/dist/index.js
var bootstrap4PaginationPreset = {};
var bootstrap5PaginationPreset = {};
var dist_default = true ? (0, import_react9.memo)(ResponsivePaginationDev) : (0, import_react9.memo)(ResponsivePagination);
function ResponsivePaginationDev(props) {
  checkLegacyProps(props);
  return ResponsivePagination(props);
}
function ResponsivePagination({ current, total, onPageChange: handlePageChange, maxWidth, narrowBehaviour, className, extraClassName = "justify-content-center", pageItemClassName = "page-item", pageLinkClassName = "page-link", activeItemClassName = "active", disabledItemClassName = "disabled", navClassName, previousClassName, nextClassName, previousLabel, nextLabel, ariaPreviousLabel, ariaNextLabel, renderNav = true, ariaCurrentAttr = true, linkHref = "hash", labelBehaviour: getLabel = defaultLabelBehaviour }) {
  const { items, ref, clearCache } = usePaginationItems(current, total, maxWidth, {
    narrowBehaviour,
    previousLabel,
    nextLabel,
    ariaPreviousLabel,
    ariaNextLabel,
    renderNav
  });
  (0, import_react9.useEffect)(() => {
    return () => clearCache();
  }, [
    clearCache,
    className,
    pageItemClassName,
    pageLinkClassName,
    activeItemClassName,
    disabledItemClassName,
    navClassName,
    previousClassName,
    nextClassName
  ]);
  if (items.length === 0)
    return null;
  function getContainerClassName() {
    if (className !== void 0) {
      return className;
    } else if (extraClassName) {
      return `pagination ${extraClassName}`;
    } else {
      return "pagination";
    }
  }
  return import_react9.default.createElement("ul", { className: getContainerClassName(), ref }, items.map((item) => item.gotoPage !== void 0 ? import_react9.default.createElement(
    "li",
    { key: item.key, className: classNames([
      pageItemClassName,
      item.active && activeItemClassName,
      item.type === "next" && (nextClassName != null ? nextClassName : navClassName),
      item.type === "previous" && (previousClassName != null ? previousClassName : navClassName)
    ]), "aria-current": item.active && ariaCurrentAttr ? "page" : void 0 },
    import_react9.default.createElement("a", { className: pageLinkClassName, href: linkHref === "hash" ? "#" : void 0, onClick: preventDefault(() => handlePageChange(item.gotoPage)), "aria-label": item.a11yLabel }, getLabel(item))
  ) : import_react9.default.createElement(
    "li",
    { key: item.key, className: classNames([
      pageItemClassName,
      disabledItemClassName,
      item.type === "next" && (nextClassName != null ? nextClassName : navClassName),
      item.type === "previous" && (previousClassName != null ? previousClassName : navClassName)
    ]), "aria-hidden": item.a11yHidden },
    import_react9.default.createElement("span", { className: pageLinkClassName, "aria-label": item.a11yLabel }, getLabel(item))
  )));
}
function classNames(names) {
  return names.filter((name) => name).join(" ");
}
ResponsivePagination.propTypes = {
  current: import_prop_types.default.number.isRequired,
  total: import_prop_types.default.number.isRequired,
  onPageChange: import_prop_types.default.func.isRequired,
  maxWidth: import_prop_types.default.number,
  narrowBehaviour: import_prop_types.default.func,
  className: import_prop_types.default.string,
  extraClassName: import_prop_types.default.string,
  pageItemClassName: import_prop_types.default.string,
  pageLinkClassName: import_prop_types.default.string,
  activeItemClassName: import_prop_types.default.string,
  disabledItemClassName: import_prop_types.default.string,
  disabledLinkClassName: import_prop_types.default.string,
  navClassName: import_prop_types.default.string,
  previousClassName: import_prop_types.default.string,
  nextClassName: import_prop_types.default.string,
  previousLabel: import_prop_types.default.string,
  nextLabel: import_prop_types.default.string,
  ariaPreviousLabel: import_prop_types.default.string,
  ariaNextLabel: import_prop_types.default.string,
  renderNav: import_prop_types.default.bool,
  ariaCurrentAttr: import_prop_types.default.bool,
  linkHref: import_prop_types.default.oneOf(["hash", "omit"]),
  labelBehaviour: import_prop_types.default.func
};
var legacyUsageWarnings = [];
function checkLegacyProps(props) {
  for (const legacyProp of [
    "srOnlyClassName",
    "a11yActiveLabel",
    "narrowStrategy"
  ]) {
    if (props[legacyProp] !== void 0 && !legacyUsageWarnings.includes(legacyProp)) {
      console.warn(`react-responsive-pagination: '${legacyProp}' prop no longer supported, please see migration guide: https://react-responsive-pagination.elantha.com/migration/`);
      legacyUsageWarnings.push(legacyProp);
    }
  }
}
export {
  bootstrap4PaginationPreset,
  bootstrap5PaginationPreset,
  dist_default as default
};
//# sourceMappingURL=react-responsive-pagination.js.map
